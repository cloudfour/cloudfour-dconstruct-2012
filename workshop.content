% dConstruct 2012
% Lyza Gardner
% September 6, 2012

# Our Devices

* BlackBerry 8320 Curve v4.5.0.81 (native browser). Our project manager Megan's old phone. Hardware keyboard and pointer.
* BlackBerry 9670 Style v6.0.0.123 (native browser). BlackBerry flip phone.
* Nexus S Android 4.1.1 Firefox 14.0.2. Smart Phone w/touchscreen.
* Nexus S Android 4.1.1 native
* Motorola Backflip Android 1.5 (Motorola Blur Build)
* iPhone 4 iOS 5.1.1 native Safari browser
* iPhone 4 iOS 5.1.1 Opera Mini
* Nokia N8 Windows Phone native browser (version?)
* [Opera Mini simulator](http://www.opera.com/developer/tools/mini/)
* Kindle Fire tablet v6.3 native browser 

-------------------------------------------------------------------------------

# Part 1. Starting from scratch

-------------------------------------------------------------------------------

## Starting with nothing

> "Be not afeard; the isle is full of noises." —*The Tempest*, Act III, Scene 2, Wm. Shakespeare

-------------------------------------------------------------------------------

## So many options

When we start from scratch, we have so many choices to make.

* Web site
* Native application
* Web site that works on mobile devices
* Web site that works "everywhere"
* Web site that works on selected devices
* Web site using development framework or tools
* Adaptation of existing web site

Mobile web development has a complicated and somewhat mysterious history.

-------------------------------------------------------------------------------

## NEED TO FLESH OUT HIGH-LEVEL SLIDES HERE 

-------------------------------------------------------------------------------

## The evolution of mobile markup and options

### WML, XHTML-MP...

* SGML
* HDML (OpenWave) -> WML
* HTML/XHTML
* cHTML (Compact HTML/iMode)
* XHTML-MP 1.1
* XHTML-MP 1.2
* XHTML-Basic

## XHTML-MP

### DOCTYPES

~~~
<!DOCTYPE html PUBLIC "-//WAPFORUM//DTD XHTML Mobile 1.0//EN"
"http://www.wapforum.org/DTD/xhtml-mobile10.dtd">
 
<!DOCTYPE html PUBLIC "-//WAPFORUM//DTD XHTML Mobile 1.1//EN"
"http://www.openmobilealliance.org/tech/DTD/xhtml-mobile11.dtd">
 
<!DOCTYPE html PUBLIC "-//WAPFORUM//DTD XHTML Mobile 1.2//EN"
"http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd">
~~~

-------------------------------------------------------------------------------

## XHTML-MP, cont.

* Modularized XHTML
* Provided a bridge between simplified (WML) mobile markup and more full-featured support
* DOCTYPE triggers (some) mobile browsers to use different layout modes
* Was commonly used

### Not supported

* `<iframe>`
* `target` attribute in links
* Certain `<table>` tags (`<tbody>`, etc.)
* Plugins

#### Handout

##### References

* Gail Rahn-Frederick and Rajesh Lal's [*Beginning Smartphone Web Development*][rahn-frederick] is a few years old now but has an in-depth look at the history, evolution and specifics of mobile markup and DOCTYPEs.
* [Jason and my book][hfmw] covers some of this in chapter 3.
* Lynda.com ["History of Mobile Markup Languages" on YouTube][history-markup] is a great little summary. I think it *might* swap XHTML-MP and XHTML-Basic in the timeline, but, really, these things are pretty complex.

-------------------------------------------------------------------------------

## HTML5 is the way forward

* HTML5 by and large is tolerated by phones, even really old ones.
* No studies I know of using non-MP XHTML-variant doctypes.

#### Good enough for jazz: HTML5 is usually OK

#### Beware: Informal HTML5 might cause choking

#### Hold that thought: Issues with HTML5 support

-------------------------------------------------------------------------------

## There's more than one way to...

* Targeting older or feature phones?
* Which is more important: bulletproof support in your market or the ability to do more powerful stuff?

#### Theme: Choice

-------------------------------------------------------------------------------

## Options in markup and semantics

### Adaptive Content

* Future of content on the Web is complex
* Adaptability is key
* CMSes are the evil

#### Handout

##### References

* [Karen McGrane][mcgrane] is a leader in adaptive content and adaptive mobile content.

#### Theme: Content

-------------------------------------------------------------------------------

## One Approach

HTML as result of translation by "robots." Classes and IDs are attached to content and are auto-generated. Limited use of classes and IDs.

~~~{.html}
<section class="level2" id="we-make-the-web-mobile.">
<h2>We make the Web <em>mobile</em>.</h2>
</section>
<section class="level2" id="what-we-do">
<h2>What we do</h2>
<section class="level3" id="mobile-development">
<h3><a href="services/mobile-development.html" title="Our Mobile Development Process">Mobile Development</a></h3>
<p>Cloud Four designs and builds mobile-optimized websites and hybrid mobile applications using web technology.</p>
<p><a href="services/mobile-development.html" title="Our Mobile Development Process">Building the Mobile Web</a></p>
</section>
~~~

#### Handout

##### References

* I gave a talk about the kind of adaptive content driving this approach at [Mobilism 2012][mobilism]. See my deck [Cutting Through the Crap: The Essence of Content on the Future Web][cut-crap]

-------------------------------------------------------------------------------

## Another Approach

~~~{.html}
<section class="scene">

  <header>
    <h4 class="stage-direction">
      Enter <strong>Caliban</strong>, <strong>Stephano</strong>, and <strong>Trinculo</strong>
    </h4>
  </header>

  <dl>
    <dt>Stephano</dt>
    <dd>
      <em class="stage-direction">(To <strong>Trinculo</strong>)</em>
      <span class="prose line">Tell not me; when the butt is out, we</span>
      <span class="prose line">will drink water; not a drop before: therefore bear up, and</span>
      <span class="prose line">board 'em. Servant-monster, drink to me.</span>
    </dd>
~~~

#### Theme: Philosophy

-------------------------------------------------------------------------------

## All this boils down to CONTENT

* Content-first design and process
* Stripping away crap
* This is a philosophical shift, even if it seems like "duh"
* We're going to start simple to ease into our work here

> "Simplify before you suppress." —Ethan Marcotte

#### Hold that thought: Mobile-first design

#### Theme: Content

#### Handout

##### References

* A nice post from [Jeremy Keith][adactio] from last year about [content first][adactio-content-first]
* Coverage from [Luke Wroblewski][lukew] of Jeffrey Zeldman's ["Content First"][lukew-aea-content-first] presentation at [An Event Apart October 2011][aea-oct-12].
* Stephen Hay's talk [Structured Content First][stephenhay-structured-content] is another perspective.

-------------------------------------------------------------------------------

## Exercise

Exploring the feel of unstyled, basic HTML5 content in different devices and browsers. Urge folks to load page on their own phones. Those without devices could hit the opera simulator.

* http://www.opera.com/developer/tools/mini/

### Notes

* What looks the same? Different?
* Fonts? Zoom level? Margins?
* Titles?
* Interfaces?

-------------------------------------------------------------------------------

## Workflow: getting into the browser

* Mobile web development demands the revisiting of design and development processes
* Get into the browser early and often

#### Theme: Process Evolution

#### Hold that Thought: More to come on process

-------------------------------------------------------------------------------

## Basic support is good

* There is a CSS-MP to go along with XHTML-MP
* But we're going to move beyond that...

#### Good enough for jazz: Basic support is good but not infallible

#### Beware: These CSS gotchas in older devices

* Background: colors, positioning, images
* Positioning
* Selectors
* Performance!

-------------------------------------------------------------------------------

## Viewports are crazytown

### These two screenshots are from the same device, different browser

![Safari on iPhone 4](exercises/101-explore/images/iphone.png)

![Opera Mini on iPhone 4](exercises/101-explore/images/iphone-opera.png)

-------------------------------------------------------------------------------

## Viewports!

![](assets/images/viewports.png)

-------------------------------------------------------------------------------

## Or, why is the zoom all different and funny?

![](assets/images/different-viewports.png)

-------------------------------------------------------------------------------

## Layout viewport versus visible

![](assets/images/layout-visible.png)

-------------------------------------------------------------------------------

## Getting to know viewports

Before we get beyond where we are with overall layout and control, let's talk about viewports.

* Visible Viewport: The view of visible content (keyhole)
* Layout Viewport: The width of the entire layout

-------------------------------------------------------------------------------

## Anatomy of a `viewport` tag

~~~{.html}
<meta name="viewport" content="width=device-width,initial-scale=1">
~~~

* `width=device-width`: Set the viewport width to the width of the device, in CSS pixels.
* `initial-scale=1`: Set initial zoom to 1, that is, 100% or normal size.

-------------------------------------------------------------------------------

## Starting from a slightly more level playing field

* CSS Reset
* Viewport tag

-------------------------------------------------------------------------------

## Font baseline

#### Rule of thumb: font reset

![](assets/images/baseline.png)

-------------------------------------------------------------------------------

## The variations abound!

It's a bit difficult to tell from this not-so-great photo, but the background color is cream-like:

![](exercises/101-explore/images/9670.png)

-------------------------------------------------------------------------------

## Other things to consider with basic CSS

* Font differences: size, faces
* DOCTYPES

#### Exercise! Getting ur baselines going

-------------------------------------------------------------------------------

## Exercise 102

![BlackBerry 8320](exercises/102-baseline/images/8320.png)

-------------------------------------------------------------------------------

## Exercise 102

![Motorola BackFlip](exercises/102-baseline/images/backflip.png)

-------------------------------------------------------------------------------

## Exercise 102

![Kindle Fire](exercises/102-baseline/images/fire.png)

-------------------------------------------------------------------------------

## Exercise 102

![iPhone](exercises/102-baseline/images/iphone.png)

![Opera Mini on iPhone](exercises/102-baseline/images/iphone-opera.png)

-------------------------------------------------------------------------------

## Exercise 102

![Nexus S](exercises/102-baseline/images/nexus.png)

![Nexus S: FireFox](exercises/102-baseline/images/nexus-firefox.png)

-------------------------------------------------------------------------------

## Exercise 102

![Nokia N8](exercises/102-baseline/images/nokia-n8.png)

-------------------------------------------------------------------------------

## So what?

### Some things to think about

* Complexity of simplicity
* What does the word *device* mean?
* Importance of care and organization
* And the world is nowhere near this simple

-------------------------------------------------------------------------------

## Tools and Tips

* Validate, validate, validate [W3C Validator][w3c-validator]
* Start simple, when possible
* Embrace variation

TODO

## CSS Organization

* Reference to Snook, SMACSS
* Options
* Touch on pre-compilers?
* Hold that thought: precompilers

## Pro Tips

* Don't chase down every form factor
* Don't assume or assert more control than you have or is necessary
* Don't start from the top
* Don't ignore mobile issues
* Don't ignore the import of serious talent in HTML, CSS and JavaScript


--------------------------------------------------------------------------

# The One Web: Responsive and Shared

## Is this the best we can do?

![](assets/images/desktop-dull.jpg)

### Let me count the ways...

* Dull and bland
* Lines are too wide

## I want to do more

![](assets/images/desktop-enhance.jpg)

### Adding...

1. Nicer text treatment (small-caps) and bigger fonts overall (heading and body)
2. "Wrapping" the lines correctly
3. Adding an illustration

## Enhancing...

![](assets/images/desktop-enhance-2.jpg)

### Text

Emulating more forms of text layout: verse and song elements

[Let's take a look](presenter-exercises/200-strawman/tempest.html)

## What ickiness

![Nokia N8](presenter-exercises/200-strawman/images/nokia-n8.png)

![iPhone 4](presenter-exercises/200-strawman/images/iphone.png)

## Argh!

![BlackBerry 9670](presenter-exercises/200-strawman/images/9670.png)

![BlackBerry 8320](presenter-exercises/200-strawman/images/8320.png)

#### Hold that thought: Fonts on older mobile browsers


## Stop the madness!

* Situations like this emphasize the need for us to recalibrate how we think about creating for the Web
* My attempt to impose some forms of "control" over the layout and styling of the web page created havoc

## Technical causes

~~~~{.css}
body {
  width: 1060px;
}
/* ... */
h1 {
  font-size: 4em;
}
.scene {
  float: left;
}
.scene dl {
  width : 600px;
}
~~~~

### Issues

* Outsized image
* Font sizes
* Layout widths fixed, in absolute units
* [Relevant CSS](presenter-exercises/200-strawman/desktop.css)

## Let's back up

* Mobile- or content-first design thinking
* Systematized way of thinking about content and its presentation on the web
* Very relevant to the mobile evolution...and beyond

## Content-first design

* Emphasis on progressive enhancement as core tenet
* Really focusing on a *baseline experience*
* Enhancing based on browser features and/or characteristics

#### But how do we make the same HTML page look good and work well on all those different browsers and devices?

We use techniques to make our websites *adaptive*.

#### Hold that thought: Separate mobile sites/content differentiation

## Responsive Web Design (RWD)

Responsive Web Design (RWD) is a set of techniques for adapting an experience for the user's environment, instead of using a rigid, one-size-fits-all type of structure.

RWD is based upon the notion of creating a fluid, proportional layout. RWD layouts *scale, flex and adapt* to flow comfortably in the user's browser, whatever size or shape it might be at the moment.

## RWD tenets

RWD is a combination of three core tactics:

1. Fluid CSS layouts
2. Responsive Images and Objects
3. CSS3 Media Queries

## Fluidity

#### What can adaptive design via RWD do to help us get our web page in order?

Let's look again at our rather simple set of structural CSS that is getting us in trouble on some of our devices:

~~~{.css}
body {
  width: 1060px;
}
.scene {
  float: left;
}
.scene dl {
  width : 600px;
}
~~~

## Recall viewports?

![](assets/images/layout-visible.png)

* The visible viewport for our page is set to `device-width`
* The layout viewport contains the entire layout of the page, which in our case is defined by the `body` CSS rule (`1060px`).

## Fluid layouts

Fluid layouts bring visible and layout viewports into harmony, and use *proportional* layout units instead of *fixed* or *absolute* units. That way, layout can scale to different window and screen sizes.

#### Fluid CSS-based layouts are RWD tenet #1

*So how do we make layouts fluid?*

## The fluid formula

![](assets/images/fluid-formula.png)

## The fluid formula, annotated

![](assets/images/fluid-formula-explained.png)

## Applying the fluid formula

![](assets/images/fluid-example.png)

## In our case, a simple change

We can change our `body` and `.scene` rules:

* `body = 1060px / 1060px = 100%`
* `.scene = 600px / 1060px = 56.603774...%` 

### Well, one more thing

`section.illustrations` doesn't currently have a width set. Let's do this:

* `.illustrations = 30%`

#### BLEH

Ugly math:

* My fixed layout wasn't very proportional in the first place, eh?
* *To round or not to round?* I round.

## So, plug that in:

~~~{.css}
body {
  width: 100%;
}
.scene {
  float: left;
  width: 56.6%;
}
.illustrations {
  float: right;
  width: 30%;
}
~~~


## So, what did that get us?

![Sadly, not much. Much wasted space on wider windows](presenter-exercises/201-proportional/images/wide.png)

## And where'd the image go?

![The image has...disappeared](presenter-exercises/201-proportional/images/narrow.png)

## Flexible images and objects

We can solve the mystery of that missing image by using the second tenet of Responsive Web Design: **flexible images and objects**.

While the element containing the image is flexible and proportional, the image itself isn't scaling up and down to flex to its container—the container can never get narrower than the image it contains. That causes it to wrap in our layout. Uh oh.

We can add a simple rule to our CSS:

~~~{.css}
img, object {
  max-width: 100%;
}
~~~

## And...?

![](presenter-exercises/201-proportional/images/narrow2.png)

## OK, total disaster

![Nokia N8](presenter-exercises/201-proportional/images/nokia-n8.png)

![Nexus S](presenter-exercises/201-proportional/images/nexus.png)

## Yet more complications

Part of the CSS added for desktop enhancement included:

~~~{.css}
.scene dl dt, .scene dl em {
  float        : left;
  margin-right : .25em;
}

.scene dd {
  margin       : .5em 0 .5em 1.25em;
}
~~~

This affects the box model layout widths of our fluid elements and causes the wrap you see on narrow screens.

*We need to stop, catch our breath, and think about things a bit differently.*

## Letting the content dictate our flow

![](presenter-exercises/201-proportional/images/narrow2.png)

* Did you notice that even on desktop widths, the wrapping on the text of the lines of the play is wonky?
* We're coming at this backward

## What matters?

1. Making the text of this scene of the play acceptably readable on as many devices as possible
1. Presenting the text of the play in a way true to dramatic and historical form
1. Providing font and color differentiation to increase readability and contrast
1. Providing font and color differentiation to increase visual appeal
1. Showing relevant, related illustrations for this section of the play

**In that order**

We achieved much of the first goal in our first baseline layout but have since then not kept to the list of priorities...

## Let's get content-first on this thing

1. Rip out desktop-centric CSS
1. Build our baseline by enhancing our existing baseline
1. Take advantage of RWD's third tenet (Media Queries) to apply different layouts to different environments

#### Beware! Proportional layouts on their own can't get us all the way there

## We don't have to start over

Some of the CSS added to enhance the layout and appearance can stay:

* Small-caps treatment on a few selectors
* Minor styling on `figure` and `figcaption` (holds the woodcut image in our case)
* The flexible images and objects rule we added
* A few modular bits of CSS for different line types (more info coming up)

## CSS treatments for different line types

~~~{.css}
span.verse {
  clear           : both;
  display         : block;
  text-indent     : -1.5em;
  margin-left     : 1.5em;
}

span.verse-end {
  display         : block;
  float           : right;
  padding-right   : 2em;
  clear           : right;
}

span.song {
  display         : block;
  text-align      : center;
}
~~~

Explanatory notes...

## A new baseline

After ripping out desktop-specific style rules, we have a new baseline.

![Motorola Backflip](presenter-exercises/202-new-baseline/images/backflip.png)

## Looks decent...

![Nokia N8](presenter-exercises/202-new-baseline/images/nokia-n8.jpg)

![iPhone 4](presenter-exercises/202-new-baseline/images/iphone.png)

## Looks decent...

![Opera Mini on iPhone4](presenter-exercises/202-new-baseline/images/iphone-opera.png)

![Opera Mini on iPhone4](presenter-exercises/202-new-baseline/images/iphone-opera2.png)

## NOW we can enhance for wider screens

Let's use RWD's third tenet to enhance our scene page for bigger displays.

**CSS3 Media Queries** are the third leg of the RWD tripod.

Media queries allow us to apply CSS selectively depending on the current environment of the user's browser.

## Media queries explained: Media types

Media types have been around a while. It's how we make print stylesheets, e.g.

~~~{.html}

<link rel="stylesheet" media="print" href="print.css">

~~~

## Media queries explained: Media features

* Media types have media features.
* For example, `width` is a media feature of several media types. `orientation` is a media feature of various bitmap media types. `color` and `monochrome` are more examples.
* Different media types have different types of values. `color` and `monochrome` are Boolean (TRUE/FALSE) values. `width` is an integer.

The most relevant **media types** are:

* all
* screen
* print

## Logical expressions

#### CSS media queries evaluate the current value of *media features* in logical expressions to determine whether to apply the enclosed CSS.

~~~ {.css}
@media screen and (min-width: 600px) {
  // In browsers that support media queries,
  // rules in here will only be applied if the
  // query expression evaluates as true
}
~~~

### Also

~~~ {.html}
<link rel="stylesheet" media="screen and (min-width:600px)" href="thing.css">
~~~

* `@import` syntax is also supported.

## Media Queries

### Illustration: Syntax

![](assets/images/media-query-syntax.png)

## Media Queries

### Illustration: Example

![](assets/images/media-query-example.png)

But before we whip up a media query or two for the scene web page...

## Fluid isn't just for block element widths

* Fluid formula can be used to derive proportional font sizes in `em`s or percentages
* Borders, indents, padding and margin-anything dimensional

## Breakpoints and media queries

You may have heard the term **breakpoint** before.

A *breakpoint* is a window/screen width at which layout changes significantly. We can define one or more breakpoints in a layout. For example, we may want to reduce a two- or three-column layout down to a single column when the window is narrower than a certain threshold.

Generally, media queries and breakpoints have been defined in pixels in the past:

~~~ {.css}
@media screen and (min-width: 600px) {
}
~~~

* But we just talked about how things should be fluid
* ...and we're trying to design the flow of this page based on its content

Definition of `em` in notes

## Re-thinking the media query

![](assets/images/baseline.png)

* The scene lines need about `28em` to lay out correctly.
* Recall our baseline. `28em ~= 448px`. 
* That's more CSS pixels than many mobile browsers have to work with.

## That's Okay

![](presenter-exercises/202-new-baseline/images/iphone-opera2.png)

* We're allowing `span.prose` lines to wrap naturally.
* Verse lines are what matter for layout. We'd ideally like verse lines to fit on one line, but when they wrap, we want to indent them to make it clear that they are part of the previous line:

~~~{.css}
span.verse {
  clear           : both;
  display         : block;
  text-indent     : -1.5em;
  margin-left     : 1.5em;
}
~~~

## So where does that leave us?

We're pretty good on narrow screens now, but we have some enhancement to do for wider screens.

![Desktop](presenter-exercises/202-new-baseline/images/desktop.png)

## Defining a breakpoint and media query

* We know we need about `28em` or `448px` to display the text of the play
* We need a few hundred more pixels for the image to feel comfortable floating right.

~~~~
28em or 448px + 22em or 352px = 50em or 800px
~~~~

* That is, the desktop-y layout feels comfortable >= 50em or 800px

### So

**We want to wrap the CSS for enhancing for wider screens in a media query**. 

* That media query should apply for screens with widths >= 50em.
* Also, `em`s should dictate the width of our lines, not a simple percentage.


## Exercise

* Wrap CSS in a media query (I'll provide the desktop.css)
* Update the rule for .scene and .scene dl
    * For baseline rule, give `max-width: 28em`
    * Remove `width` from `.scene` (probably)
* Advanced: make image float treatment better

## Summary and pro tips

* Talk about CSS organization

# Differentiating the web

## How are we doing?

So, we've got what seems like a solid baseline for narrow screens and a single breakpoint to adapt the layout for wider screens.

![](assets/images/desktop-rwd.png)

## Hot mess in IE

But it's a hot mess in IE8. What gives?

![](assets/images/ie8-hot-mess.png)

## Understanding media query support

### Tackling the lack of media query support

TODO: BB 8320 Screen shot

> "The absence of support for media queries is in fact the first media query."—Bryan Rieger

![](assets/images/media-query-support.png)

## Media query support options

### IE conditional tags

TODO: Steve Souders performance concern

~~~~{.css}
<link rel="stylesheet" type="text/css" href="taps.css" />
<link rel="stylesheet" type="text/css" href="layout.css" media="all and min-width: 481px)">
<!--[if (lt IE 9) & (!IEMobile)]>
<link rel="stylesheet" type="text/css" href="layout.css" media="all" />
<![endif]-->
~~~~

### Polyfills

* Respond.js: <https://github.com/scottjehl/Respond>
* CSS3MediaQueries.js: <http://code.google.com/p/css3-mediaqueries-js/>

Respond is faster, but only contains a subset of CSS support. Start with it.

## Updating our web page

~~~{.html}
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <link rel="stylesheet" href="styles.css" />
  <!--[if (lt IE 9) & (!IEMobile)]>
  <link rel="stylesheet" type="text/css" href="ie.css" media="all" />
  <![endif]-->
  <title>The Tempest: Act 3, Sc. 2 | Shakespeare</title>
</head>
~~~

`ie.css` contains the same CSS as is inside the media query.

## Um.

![](assets/images/ie8-hot-mess2.png)

Turns out there's another problem here: lack of HTML5 element support.

## It's a question of features

A lot of developing for today's web is chasing down support and understanding the nitty-gritty of a lot of details.

We can help to keep some of our sanity by:

* Being good about progressive enhancement
* Thinking about things in terms of what **features** the different user agents accessing our site support
* Assessing shortcomings and fomenting a strategy about support priorities and tools to broaden support

## Some tools at our disposal

* Industry-standard techniques (e.g. IE conditional tags)
* Feature-detection code and libraries (e.g. Modernizr)
* Broadly-adopted core support tools and polyfills for broader concerns (e.g. HTML5 shim, Selectivizr)
* Libraries and polyfills for more specific concerns (e.g. video.js, placeholder.js)

## Arming ourselves

Let's try to beat IE 8 into submission, shall we?

* HTML5 Shim via Modernizr

~~~~{.html}
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <script src="Modernizr.js"></script>
  <link rel="stylesheet" href="styles.css" />
  <!--[if (lt IE 9) & (!IEMobile)]>
  <link rel="stylesheet" type="text/css" href="ie.css" media="all" />
  <![endif]-->
  <title>The Tempest: Act 3, Sc. 2 | Shakespeare</title>
</head>
~~~~

## Better!

![](presenter-exercises/301-polyfilled/images/ie8.png)

## So, wait, tell me more about Modernizr

![](assets/images/modernizr.jpg)

* Feature detection for common HTML5 things
* Enhancing content when we have positive test results
* CSS Classes

## Font Squirrel

![](assets/images/font-squirrel.png)

## Using Modernizr and Font Squirrel to enhance

* Modernizr test for @font-face and generated content support
* Font-squirrel-generated @font-face syntax and font files

## Exercise

* Add @font-face code
* Write CSS rule for html.fontface
* Add jQuery library
* Write CSS rule for generated-content (hint: not in IE.css)

## Performance issues

We just threw a lot of JS and fonts out there



## Performance tools



## Ideas

* RWD
* Fluid formula
* Fluid layouts
* Flexible images/media
* Media Queries
* Media Query Management

* Performance
* `<img>` tag conundrum
* `<img>` Revisit
* Advanced CSS
* Flexbox
* The New Design Workflow

## The One Web

## Web Approach Philosophy

You're here, so you've at least partially voted for the web.



# The Differentiated Web

## Ideas

* Feature vs. device detection
* Progressive Enhancement
* Re-visit CSS; more advanced techniques
* Columns
* Animations, transitions
* Typography
* Polyfills
---
* Rolling your own
* The binary fallacy
* Behavioral vs. presentational
* Different experiences for different device classes
* UA sniffing
* DDRs

## Exercises

* Feature-testing and enhancing a layout


------------------------------------------------------
# Behaviors and APIs

## Ideas

* Geolocation
* Cross-platform consistencies
* Different types of APIs
* AppCache primer
* LocalStorage primer
* W3C
* WhatWG
* Standards in general
* Rough support charts
* JS vs. HTML APIs

## Exercises

Write geolocation script/page integration and test on device.

# Tools and Frameworks

## Ideas

* Development frameworks
* CSS frameworks
* Foundation
* Bootstrap
* beware of "responsive"
* libraries
* tools
* jQM
* Phonegap
* Modernizr redux
* Throwing libraries at the problem
* Sencha

## Exercises

Exercise idea: Style same page w/different frameworks

# Testing and Workflows

## Ideas

* Untesting
* remote debug
* Shadow
* weinre
* shim
* Dragonfly
* jDrop
* Bookmarklets
* Emulators
* Automated testing
* Devices

## Exercises

TBD

# Master Resources

[adactio]: http://adactio.com/journal
[adactio-content-first]: http://adactio.com/journal/4523/
[aea-oct-12]: http://aneventapart.com/2011/dc/
[cssweekly]: http://css-weekly.com
[cut-crap]: https://speakerdeck.com/u/lyzadanger/p/cutting-through-the-crap-the-essence-of-content-on-the-future-web
[hfmw]: http://bit.ly/hf-mw
[history-markup]: http://www.youtube.com/watch?v=egKQhGLomcQ
[lukew]: http://www.lukew.com/
[lukew-aea-content-first]: http://www.lukew.com/ff/entry.asp?1430
[mcgrane]: http://karenmcgrane.com/
[mobilism]: http://mobilism.nl
[opera-mini-simulator]: http://www.opera.com/developer/tools/mini/
[rahn-frederick]: http://www.amazon.com/Beginning-Smartphone-Web-Development-Applications/dp/143022620X
[stephenhay-structured-content]: http://www.slideshare.net/stephenhay/structured-content-first
[w3c-validator]: http://validator.w3c.org
